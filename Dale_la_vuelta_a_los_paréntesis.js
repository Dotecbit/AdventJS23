/*
    En el taller de Santa ðŸŽ…, algunos mensajes navideÃ±os han sido escritos de manera peculiar: las letras dentro de los parÃ©ntesis deben ser leÃ­das al revÃ©s
    Santa necesita que estos mensajes estÃ©n correctamente formateados. Tu tarea es escribir una funciÃ³n que tome una cadena de texto y revierta los caracteres dentro de cada par de parÃ©ntesis, eliminando los parÃ©ntesis en el mensaje final.
    Eso sÃ­, ten en cuenta que pueden existir parÃ©ntesis anidados, por lo que debes invertir los caracteres en el orden correcto.

    Notas:
    Las cadenas de entrada siempre estarÃ¡n bien formadas con parÃ©ntesis que coinciden correctamente, no necesitas validarlos.
    En el mensaje final no deben quedar parÃ©ntesis.
    El nivel mÃ¡ximo de anidamiento es 2.
*/

//  FunciÃ³n con "while"
//  Este algoritmo termina sin realizar el bucle si no se ha de revertir ningÃºn intervalo del mensaje.
//  -> Complejidad: 1
function decode(message) {
    let result = message;
    let innerFirstReverse;
    let innerLastReverse;

    while(result.includes('(')){                                                // anidamiento 1. 1 "while": 1 punto
        innerLastReverse = result.indexOf(')');
        innerFirstReverse = result.slice(0,innerLastReverse).lastIndexOf('(')+1;

        result = 
            result.slice(0,innerFirstReverse-1)+
            result.slice(innerFirstReverse, innerLastReverse)
                .split('').reverse().join('')+
            result.slice(innerLastReverse+1)
    }

    return result;
}

//  FunciÃ³n con "do-while". 
//  Este algoritmo en los casos directos realiza el loop una vez, sin necesidad de ello. Es posible mejorarlo con un "while" en tal caso.
//  -> Complejidad: 1
function decode(message) {
    let result = message;
    let innerFirstReverse;
    let innerLastReverse;

    do{                                                                             // anidamiento = 1. 1 "while": 1 punto
        innerLastReverse = result.indexOf(')');
        innerFirstReverse = result.slice(0,innerLastReverse).lastIndexOf('(')+1;
    
        result = 
            result.slice(0,innerFirstReverse-1)+
            result.slice(innerFirstReverse, innerLastReverse)
                .split('').reverse().join('')+
            result.slice(innerLastReverse+1)
    }while(result.includes('('))

    return result;
}
